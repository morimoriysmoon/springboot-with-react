// New : Applying plugins with the plugins DSL
plugins {
    id 'java'
    id 'eclipse'
    id 'com.gradle.build-scan' version '2.0.2'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'com.moowork.node' version '1.3.1'
}

group = 'com.momenton'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
    gradlePluginPortal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    compile 'org.springframework.boot:spring-boot-starter-undertow'

    compile "com.querydsl:querydsl-jpa"
    compile "com.querydsl:querydsl-apt"

    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    querydslSourcesDir = querydslSrcDir
    jpa = true
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath

    // exclude tomcat
    compile.exclude module: 'spring-boot-starter-tomcat'

    compileOnly {
        extendsFrom annotationProcessor
    }
}

node {
    download = true
    nodeModulesDir = file("${project.projectDir}/frontend")
    yarnVersion = '1.19.1'
}

task webpack(type: YarnTask, dependsOn: yarn_install) {
    println('Webpack: yarn build')
    args = ['build']
}

task deleteBundledJS(type: Delete, description: "Delete bundled JS") {
    println('Delete bundled js')
    def dirName ="${project.projectDir}/src/main/resources/static/js/dist"
    project.delete(files(dirName)) {
    }
}
webpack.dependsOn(deleteBundledJS)
processResources.dependsOn(webpack)